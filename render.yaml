# render.yaml - Comentado Linha a Linha (Atualizado com ClassificaImagem Agent)

services:
# Seção principal: define todos os serviços da aplicação
# YAML: estrutura hierárquica usando indentação

  - type: web
    # Tipo de serviço: web application
    # Render oferece diferentes tipos: web, worker, cron, static
    # web: serviço HTTP que aceita requisições externas
    
    name: agentes-ia-fia
    # Nome único do serviço no Render
    # Usado para identificação e geração de URLs
    # Convenção: kebab-case (hífens em minúsculas)
    
    env: python
    # Ambiente de execução: Python runtime
    # Render detecta versão automaticamente ou usa especificada
    # Outras opções: node, ruby, go, etc.
    
    plan: free  # Pode ser alterado para starter, standard, pro conforme necessário
    # Plano de pricing do Render
    # free: gratuito com limitações (sleep após inatividade)
    # starter/standard/pro: planos pagos com mais recursos
    # NOTA: ClassificaImagem Agent pode beneficiar de planos pagos para melhor performance
    
    buildCommand: |
      # Comando executado durante build/deploy
      # | indica string multi-linha literal em YAML
      
      pip install --upgrade pip
      # Atualiza pip para versão mais recente
      # Evita problemas de compatibilidade com dependências
      
      # Instalar dependências do sistema para processamento de imagem
      apt-get update && apt-get install -y \
        libgl1-mesa-glx \
        libglib2.0-0 \
        libsm6 \
        libxext6 \
        libxrender-dev \
        libgomp1 \
        libgthread-2.0-0
      # Dependências necessárias para OpenCV e processamento de imagem
      # libgl1-mesa-glx: OpenGL para processamento gráfico
      # libglib2.0-0: biblioteca base do GNOME
      # libsm6, libxext6, libxrender-dev: X11 libraries
      # libgomp1: OpenMP para paralelização
      # libgthread-2.0-0: threading support
      
      pip install -r requirements.txt
      # Instala dependências Python listadas em requirements.txt
      # -r: lê lista de dependências de arquivo
      # Inclui dependências: pinecone-client, langchain-pinecone, LlamaIndex, OpenCV, Pillow
      
      npm install -g firecrawl-mcp
      # Instala globalmente o pacote Node.js firecrawl-mcp
      # -g: instalação global (disponível sistema-wide)
      # Necessário para o MCP Agent funcionar
    
    startCommand: uvicorn app:app --host 0.0.0.0 --port $PORT --workers 1
    # Comando para iniciar aplicação em produção
    # uvicorn: servidor ASGI para aplicações Python assíncronas
    # app:app: módulo:variável (arquivo app.py, variável app)
    # --host 0.0.0.0: aceita conexões de qualquer IP
    # --port $PORT: usa variável de ambiente PORT definida pelo Render
    # --workers 1: single worker para evitar conflitos de memória com vision models
    
    healthCheckPath: /health
    # Endpoint para verificação de saúde da aplicação
    # Render faz requisições GET para este path
    # Se retornar status 200, considera aplicação saudável
    # Load balancer usa para determinar se instância está funcionando
    
    # Configurações de ambiente
    envVars:
    # Lista de variáveis de ambiente para a aplicação
    
      - key: PYTHON_VERSION
        value: "3.11"
        # Especifica versão Python a ser usada
        # String entre aspas para evitar interpretação como número
        # Garante compatibilidade com dependências LlamaIndex
        
      - key: PORT
        value: "8000"
        # Porta padrão para desenvolvimento/fallback
        # Render sobrescreve com porta dinâmica em produção
        
      - key: NODE_VERSION
        value: "18"
        # Versão Node.js para executar firecrawl-mcp
        # Necessária para compatibilidade do pacote MCP
        
      - key: FIRECRAWL_API_KEY
        sync: false  # Será configurada via dashboard do Render
        # Chave API do Firecrawl
        # sync: false = não sincroniza com repositório
        # Deve ser configurada manualmente no dashboard por segurança
        
      - key: OPENAI_API_KEY
        sync: false  # Será configurada via dashboard do Render
        # Chave API da OpenAI
        # OBRIGATÓRIA para ClassificaImagem Agent
        # Configuração manual protege credenciais sensíveis
        
      - key: PINECONE_API_KEY
        sync: false  # Será configurada via dashboard do Render
        # Chave API do Pinecone para vector database
        # Necessária para funcionalidade RAG (Retrieval-Augmented Generation)
        # Deve ser configurada manualmente por segurança
        
      # Configurações específicas do ClassificaImagem Agent
      - key: IMAGE_DOWNLOAD_TIMEOUT
        value: "45"
        # Timeout aumentado para download de imagens em produção
        # 45 segundos para conexões mais lentas
        
      - key: MAX_IMAGE_SIZE_MB
        value: "15"
        # Tamanho máximo reduzido para otimizar performance
        # 15MB para evitar problemas de memória no free tier
        
      - key: VISION_MODEL
        value: "gpt-4o-mini"
        # Modelo padrão para análise de imagem
        # gpt-4o-mini: mais econômico e rápido
        
      - key: VISION_TEMPERATURE
        value: "0.1"
        # Temperatura baixa para respostas mais determinísticas
        # Importante para análises consistentes
        
      - key: VISION_MAX_TOKENS
        value: "3000"
        # Máximo de tokens reduzido para otimizar custo
        # 3000 tokens suficiente para análises detalhadas
        
      - key: IMAGE_ANALYSIS_LOGGING
        value: "false"
        # Desabilitar logs detalhados em produção
        # Evita poluição de logs e melhora performance
        
      - key: ACCEPTED_IMAGE_FORMATS
        value: "jpg,jpeg,png,gif,webp"
        # Formatos de imagem aceitos
        # Exclui BMP para otimização
    
    # Configurações de recurso
    disk:
    # Configuração de armazenamento persistente
    
      name: data
      # Nome do volume de dados
      
      mountPath: /opt/render/project/data
      # Caminho onde volume será montado no container
      # /opt/render/project: diretório padrão do Render
      # /data: subdiretório para dados persistentes
      
      sizeGB: 2
      # Tamanho do disco em 2GB
      # Espaço adicional para cache de imagens e modelos
      # ClassificaImagem pode gerar arquivos temporários maiores
    
    # Auto-deploy do branch main
    branch: main
    # Branch Git que triggera deploys automáticos
    # Quando main é atualizado, Render rebuilda automaticamente
    
    # Configurações de runtime
    runtime: python3
    # Runtime específico: Python 3
    # Redundante com env: python, mas explícito
    
    # Headers de segurança personalizados
    headers:
    # Lista de headers HTTP para adicionar às respostas
    # Importante para segurança da aplicação web
    
      - path: /*
        # Aplica a todas as rotas (* = wildcard)
        name: X-Frame-Options
        value: DENY
        # Previne embedding em iframes
        # Proteção contra clickjacking attacks
        
      - path: /*
        name: X-Content-Type-Options
        value: nosniff
        # Previne MIME type sniffing pelo navegador
        # Força respeitar Content-Type declarado
        
      - path: /*
        name: Referrer-Policy
        value: strict-origin-when-cross-origin
        # Controla informações de referrer enviadas
        # strict-origin-when-cross-origin: máxima privacidade
        
      - path: /*
        name: Permissions-Policy
        value: geolocation=(), microphone=(), camera=()
        # Desabilita APIs sensíveis do navegador
        # geolocation, microphone, camera: lista vazia = negado
        
      - path: /imagem/*
        name: Cache-Control
        value: no-cache, no-store, must-revalidate
        # Headers específicos para endpoints de imagem
        # Evita cache de análises sensíveis
    
    # Configurações de saúde
    initialDelaySeconds: 60
    # Tempo de espera antes do primeiro health check
    # 60 segundos: permite inicialização completa da aplicação
    # ClassificaImagem Agent precisa carregar modelos LlamaIndex
    # Tempo aumentado para acomodar carregamento de dependências de visão
    
    # Configurações de build
    buildFilter:
    # Filtros para otimizar builds
    # Define quais mudanças triggeram rebuild
    
      paths:
      # Lista de caminhos que trigeram rebuild quando modificados
        - app.py
        # Arquivo principal da aplicação
        - requirements.txt
        # Dependências Python (atualizado com LlamaIndex)
        - agents/**
        # Todos os arquivos no diretório agents
        # **: wildcard recursivo (inclui subdiretórios)
        # Inclui novo classifica_imagem_agent.py
        - static/**
        # Arquivos estáticos (CSS, JS)
        - pages/**
        # Templates HTML (index.html atualizado)
        
      ignoredPaths:
      # Caminhos ignorados (não trigeram rebuild)
        - README.md
        # Documentação não afeta funcionamento
        - .gitignore
        # Configuração Git
        - .env*
        # Arquivos de ambiente (contêm credenciais)
        # .env*: wildcard para .env, .env.local, etc.
        - docs/**
    
    # Configurações de memória e CPU
    scaling:
    # Configurações de escalabilidade
      minInstances: 1
      # Mínimo de 1 instância sempre ativa
      # Evita cold starts para ClassificaImagem Agent
      
      maxInstances: 2
      # Máximo de 2 instâncias no free tier
      # ClassificaImagem Agent pode ser memory-intensive
    
    # Configurações de rede
    routes:
    # Configurações de roteamento específicas
      - type: rewrite
        source: /imagem/analyze
        destination: /imagem/analyze
        # Rota específica para análise de imagem
        
      - type: rewrite
        source: /docs
        destination: /docs
        # Mantém documentação da API acessível

# Configurações globais do deploy
buildCommand: |
  # Comando global de build executado uma vez
  echo "🚀 Iniciando deploy dos Agentes de IA - v1.4.0"
  echo "📦 Instalando dependências para ClassificaImagem Agent..."
  echo "🖼️ Configurando processamento de imagem..."
  echo "✅ Build concluído com sucesso!"

# Notificações de deploy
notifications:
  # Lista de notificações para eventos de deploy
  - type: email
    # Tipo de notificação
    events: [deploy-succeeded, deploy-failed]
    # Eventos que triggeram notificação
    filter:
      branch: main
      # Apenas para branch main