# Biblioteca para carregar vari√°veis de ambiente de arquivos .env
from dotenv import load_dotenv
# load_dotenv: Fundamental para separar configura√ß√£o sens√≠vel do c√≥digo

# Import da classe principal do workflow local
from src.workflow import Workflow
# Import relativo da classe Workflow que orquestra todo o processo

# Carrega vari√°veis de ambiente do arquivo .env
load_dotenv()
# Execu√ß√£o imediata garante que API keys estejam dispon√≠veis

# Fun√ß√£o principal que implementa interface de linha de comando
def main():
    # Instancia workflow - inicializa todos os servi√ßos e depend√™ncias
    workflow = Workflow()
    # Workflow.__init__() configura Firecrawl, OpenAI LLM e prompts
    
    # Header informativo para o usu√°rio
    print("Agente de Pesquisa")

    # Loop principal de intera√ß√£o usu√°rio-sistema
    while True:
        # Solicita input do usu√°rio com prompt espec√≠fico
        query = input("\n Consulta: ").strip()
        # .strip() remove espa√ßos em branco das extremidades
        
        # Condi√ß√µes de sa√≠da do loop - m√∫ltiplas op√ß√µes para UX
        if query.lower() in {"fui!", "sair"}:
            # .lower() torna compara√ß√£o case-insensitive
            # Set {"fui!", "sair"} permite m√∫ltiplas palavras de sa√≠da
            break

        # Verifica se query n√£o est√° vazia ap√≥s strip
        if query:
            # Executa workflow completo passando query do usu√°rio
            result = workflow.run(query)
            # result √© ResearchState com todas as informa√ß√µes coletadas
            
            # Cabe√ßalho dos resultados com query original
            print(f"\n Resultados para: {query}")
            # Separador visual para melhor legibilidade
            print("=" * 60)

            # Itera atrav√©s das empresas encontradas com numera√ß√£o
            for i, company in enumerate(result.companies, 1):
                # enumerate(, 1) inicia contagem em 1 em vez de 0
                
                # Exibe informa√ß√µes b√°sicas da empresa com emojis para UX
                print(f"\n{i}. üè¢ {company.name}")
                print(f"   üåê Website: {company.website}")
                print(f"   üí∞ Valores: {company.pricing_model}")
                print(f"   üìñ Open Source: {company.is_open_source}")

                # Exibe tech stack se dispon√≠vel
                if company.tech_stack:
                    # Lista apenas primeiros 5 elementos para n√£o poluir output
                    print(f"   üõ†Ô∏è  Tecnologia: {', '.join(company.tech_stack[:5])}")

                # Exibe linguagens suportadas se dispon√≠vel
                if company.language_support:
                    # Join converte lista em string separada por v√≠rgulas
                    print(
                        f"   üíª Suporte: {', '.join(company.language_support[:5])}"
                    )

                # Exibe status de API com valida√ß√£o de None
                if company.api_available is not None:
                    # Operador tern√°rio para emoji baseado em boolean
                    api_status = (
                        "‚úÖ Dispon√≠vel" if company.api_available else "‚ùå N√£o dispon√≠vel"
                    )
                    print(f"   üîå API: {api_status}")

                # Exibe capacidades de integra√ß√£o se dispon√≠vel
                if company.integration_capabilities:
                    # Limita a 4 integra√ß√µes para legibilidade
                    print(
                        f"   üîó Integra√ß√µes: {', '.join(company.integration_capabilities[:4])}"
                    )

                # Exibe descri√ß√£o se v√°lida (n√£o vazia e n√£o indicador de falha)
                if company.description and company.description != "Falhou":
                    print(f"   üìù Descri√ß√£o: {company.description}")

                # Linha vazia para separar empresas visualmente
                print()

            # Se√ß√£o de recomenda√ß√µes se an√°lise foi gerada
            if result.analysis:
                print("Recomenda√ß√µes: ")
                # Separador visual menor para subsection
                print("-" * 40)
                # Exibe an√°lise/recomenda√ß√µes geradas pelo LLM
                print(result.analysis)


# Ponto de entrada padr√£o Python
if __name__ == "__main__":
    # Executa fun√ß√£o main apenas se arquivo for executado diretamente
    main()
    # N√£o executa se arquivo for importado como m√≥dulo